// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: urls.sql

package sqlc

import (
	"context"
	"time"

	null "gopkg.in/guregu/null.v4"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (
    user_id,
    original_url,
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING id
`

type CreateURLParams struct {
	UserID      int32     `json:"user_id"`
	OriginalUrl string    `json:"original_url"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (int32, error) {
	row := q.db.QueryRow(ctx, createURL, arg.UserID, arg.OriginalUrl, arg.ExpiresAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getURLByShortURI = `-- name: GetURLByShortURI :one
SELECT id, short_uri, user_id, requested_count, original_url, expires_at
FROM urls
WHERE short_uri = $1
`

func (q *Queries) GetURLByShortURI(ctx context.Context, shortUri null.String) (Url, error) {
	row := q.db.QueryRow(ctx, getURLByShortURI, shortUri)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUri,
		&i.UserID,
		&i.RequestedCount,
		&i.OriginalUrl,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserURLS = `-- name: GetUserURLS :many
SELECT id, short_uri, user_id, requested_count, original_url, expires_at
FROM urls
WHERE user_id = $1
ORDER BY requested_count DESC, id DESC
`

func (q *Queries) GetUserURLS(ctx context.Context, userID int32) ([]Url, error) {
	rows, err := q.db.Query(ctx, getUserURLS, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.ShortUri,
			&i.UserID,
			&i.RequestedCount,
			&i.OriginalUrl,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseURLRequestedCount = `-- name: IncreaseURLRequestedCount :exec
UPDATE urls
SET requested_count = requested_count + 1
WHERE short_uri = $1
`

func (q *Queries) IncreaseURLRequestedCount(ctx context.Context, shortUri null.String) error {
	_, err := q.db.Exec(ctx, increaseURLRequestedCount, shortUri)
	return err
}

const setShortURLByID = `-- name: SetShortURLByID :one
UPDATE urls
SET short_uri = $1,
    expires_at = $2
WHERE id = $3
RETURNING id, short_uri, user_id, requested_count, original_url, expires_at
`

type SetShortURLByIDParams struct {
	ShortUri  null.String `json:"short_uri"`
	ExpiresAt time.Time   `json:"expires_at"`
	ID        int32       `json:"id"`
}

func (q *Queries) SetShortURLByID(ctx context.Context, arg SetShortURLByIDParams) (Url, error) {
	row := q.db.QueryRow(ctx, setShortURLByID, arg.ShortUri, arg.ExpiresAt, arg.ID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUri,
		&i.UserID,
		&i.RequestedCount,
		&i.OriginalUrl,
		&i.ExpiresAt,
	)
	return i, err
}
