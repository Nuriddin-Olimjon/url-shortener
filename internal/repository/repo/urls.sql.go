// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: urls.sql

package sqlc

import (
	"context"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (
    user_id,
    requested_count,
    original_url
) VALUES (
    $1, $2, $3
) RETURNING id
`

type CreateURLParams struct {
	UserID         int32  `json:"user_id"`
	RequestedCount int32  `json:"requested_count"`
	OriginalUrl    string `json:"original_url"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (int32, error) {
	row := q.db.QueryRow(ctx, createURL, arg.UserID, arg.RequestedCount, arg.OriginalUrl)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getURLByID = `-- name: GetURLByID :one
SELECT id, short_uri, user_id, requested_count, original_url
FROM urls
WHERE id = $1
`

func (q *Queries) GetURLByID(ctx context.Context, id int32) (Url, error) {
	row := q.db.QueryRow(ctx, getURLByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUri,
		&i.UserID,
		&i.RequestedCount,
		&i.OriginalUrl,
	)
	return i, err
}

const getUserURLS = `-- name: GetUserURLS :many
SELECT id, short_uri, user_id, requested_count, original_url
FROM urls
WHERE user_id = $1
`

func (q *Queries) GetUserURLS(ctx context.Context, userID int32) ([]Url, error) {
	rows, err := q.db.Query(ctx, getUserURLS, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.ShortUri,
			&i.UserID,
			&i.RequestedCount,
			&i.OriginalUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setShortURLByID = `-- name: SetShortURLByID :exec
UPDATE urls
SET short_uri = $1
WHERE id = $2
`

type SetShortURLByIDParams struct {
	ShortUri string `json:"short_uri"`
	ID       int32  `json:"id"`
}

func (q *Queries) SetShortURLByID(ctx context.Context, arg SetShortURLByIDParams) error {
	_, err := q.db.Exec(ctx, setShortURLByID, arg.ShortUri, arg.ID)
	return err
}
